// require('dotenv').config()
// const { env: { TEST_MONGODB_URL } } = process
// const { mongoose, models: { User, Spot } } = require('share-my-spot-data')
// const { expect } = require('chai')
// const { random } = Math
// const retrieveMyBookings = require('./retrieve-my-bookings')
// describe('retrieveMyBookings', () => {
//     before(() =>
//         mongoose.connect(TEST_MONGODB_URL, { useNewUrlParser: true, useUnifiedTopology: true })
//             .then(() => Promise.all([User.deleteMany(), Spot.deleteMany()]))
//             .then(() => { })
//     )
//     let name, name2, surname, surname2, email, email2, phone, phone2, password, password2, _id, _id2, _spotId, publisherId, title, addressLocation, addressStNumber, addressOther, length, width, height, area, description, price, acceptsBarker, surveillance, isCovered, hourStarts, hourEnds, mon, tue, wed, thu, fri, sat, sun
//     beforeEach(() => {
//         name = `name-${random()}`
//         surname = `surname-${random()}`
//         email = `email-${random()}@mail.com`
//         phone = 123456 + `${random()}`
//         password = `password-${random()}`
//         name2 = `name-${random()}`
//         surname2 = `surname-${random()}`
//         email2 = `email-${random()}@mail.com`
//         phone2 = 123456 + `${random()}`
//         password2 = `password-${random()}`
//         title = `title-${random()}`
//         addressLocation = `barcelona`
//         addressStNumber = `addressStNumber-${random()}`
//         addressOther = `addressOther-${random()}`
//         length = 4.5
//         width = 2.22
//         height = 2.4
//         area = 10
//         description = `description-${random()}`
//         price = 2
//         acceptsBarker = 'yes'
//         surveillance = 'no'
//         isCovered = 'yes'
//         hourStarts = '9:00'
//         hourEnds = '18:00'
//         mon = 'yes'
//         tue = 'yes'
//         wed = 'yes'
//         thu = 'yes'
//         fri = 'yes'
//         sat = false
//         sun = false
//     })
//     describe('when both user and spot exists', () => {
//         beforeEach(() =>
//             Promise.resolve(User.create({ name, surname, email, phone, password }))
//                 .then(({ id }) => _id = id)
//                 .then(() => Promise.resolve(Spot.create({ publisherId: _id, title: title, addressLocation: addressLocation, addressStNumber: addressStNumber, addressOther: addressOther, length: length, width: width, height: height, area: area, description: description, price: price, acceptsBarker: acceptsBarker, surveillance: surveillance, sCovered: isCovered, hourStarts: hourStarts, hourEnds: hourEnds, mon: mon, tue: tue, wed: wed, thu: thu, fri: fri, sat: sat, sun: sun })))
//                 .then(({ id }) => _spotId = id)
//                 .then(() => Promise.all([User.findByIdAndUpdate(_id, { $push: { publishedSpots: _spotId } }), Spot.findByIdAndUpdate(_spotId)]))
//                 .then(([user, spot]) => {
//                     return Promise.all([user.save(), spot.save()])
//                 })
//                 .then(() => { })
//         )
//         it('should successfully retrieve the specific spot', () =>
//             retrieveMyBookings(_id)
//                 .then(spots => {
//                     expect(spots.length).to.equal(1)
//                     expect(spots).to.be.instanceOf(Array)
//                     expect(spots[0].id).to.equal(_spotId)
//                     expect(spots[0].publisherId.id).to.equal(_id)
//                 })
//                 .then(() => { })
//         )
//         describe('when the user does not exist', () => {
//             beforeEach(() => User.deleteMany().then(() => { }))
//             it('should fail to post a comment if the user does not exist', () =>
//                 retrieveMyBookings(_id)
//                     .then(() => { throw new Error('should not reach this point') })
//                     .catch(({ message }) => {
//                         expect(message).not.to.be.undefined
//                         expect(message).to.equal(`user with id ${_id} not found`)
//                     })
//                     .then(() => { })
//             )
//         })
//         describe('unhappy paths', () => {
//             it('should fail on a non-string user id', () => {
//                 __id = 9328743289
//                 expect(() => retrieveMyBookings(__id)).to.throw(TypeError, `id ${__id} is not a string`)
//                 __id = false
//                 expect(() => retrieveMyBookings(__id)).to.throw(TypeError, `id ${__id} is not a string`)
//                 __id = undefined
//                 expect(() => retrieveMyBookings(__id)).to.throw(TypeError, `id ${__id} is not a string`)
//                 __id = []
//                 expect(() => retrieveMyBookings(__id)).to.throw(TypeError, `id ${__id} is not a string`)
//             })
//         })
//     })
//     after(() => Promise.all([User.deleteMany(), Spot.deleteMany()]).then(() => mongoose.disconnect()))
// })
function cov_3zmaazqbz(){var path="/Users/federicolacabaratz/bootcamp/collab/skylab-bootcamp-202001/staff/federico-lacabaratz/share-my-spot/share-my-spot-api/logic/retrieve-my-bookings.spec.js";var hash="48b6472132784d20b3f177d101273d789a180c66";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/federicolacabaratz/bootcamp/collab/skylab-bootcamp-202001/staff/federico-lacabaratz/share-my-spot/share-my-spot-api/logic/retrieve-my-bookings.spec.js",statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"48b6472132784d20b3f177d101273d789a180c66"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_3zmaazqbz=function(){return actualCoverage;};return actualCoverage;}cov_3zmaazqbz();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJldHJpZXZlLW15LWJvb2tpbmdzLnNwZWMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVxdWlyZSgnZG90ZW52JykuY29uZmlnKClcblxuLy8gY29uc3QgeyBlbnY6IHsgVEVTVF9NT05HT0RCX1VSTCB9IH0gPSBwcm9jZXNzXG4vLyBjb25zdCB7IG1vbmdvb3NlLCBtb2RlbHM6IHsgVXNlciwgU3BvdCB9IH0gPSByZXF1aXJlKCdzaGFyZS1teS1zcG90LWRhdGEnKVxuLy8gY29uc3QgeyBleHBlY3QgfSA9IHJlcXVpcmUoJ2NoYWknKVxuLy8gY29uc3QgeyByYW5kb20gfSA9IE1hdGhcbi8vIGNvbnN0IHJldHJpZXZlTXlCb29raW5ncyA9IHJlcXVpcmUoJy4vcmV0cmlldmUtbXktYm9va2luZ3MnKVxuXG5cbi8vIGRlc2NyaWJlKCdyZXRyaWV2ZU15Qm9va2luZ3MnLCAoKSA9PiB7XG4vLyAgICAgYmVmb3JlKCgpID0+XG4vLyAgICAgICAgIG1vbmdvb3NlLmNvbm5lY3QoVEVTVF9NT05HT0RCX1VSTCwgeyB1c2VOZXdVcmxQYXJzZXI6IHRydWUsIHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZSB9KVxuLy8gICAgICAgICAgICAgLnRoZW4oKCkgPT4gUHJvbWlzZS5hbGwoW1VzZXIuZGVsZXRlTWFueSgpLCBTcG90LmRlbGV0ZU1hbnkoKV0pKVxuLy8gICAgICAgICAgICAgLnRoZW4oKCkgPT4geyB9KVxuLy8gICAgIClcblxuLy8gICAgIGxldCBuYW1lLCBuYW1lMiwgc3VybmFtZSwgc3VybmFtZTIsIGVtYWlsLCBlbWFpbDIsIHBob25lLCBwaG9uZTIsIHBhc3N3b3JkLCBwYXNzd29yZDIsIF9pZCwgX2lkMiwgX3Nwb3RJZCwgcHVibGlzaGVySWQsIHRpdGxlLCBhZGRyZXNzTG9jYXRpb24sIGFkZHJlc3NTdE51bWJlciwgYWRkcmVzc090aGVyLCBsZW5ndGgsIHdpZHRoLCBoZWlnaHQsIGFyZWEsIGRlc2NyaXB0aW9uLCBwcmljZSwgYWNjZXB0c0Jhcmtlciwgc3VydmVpbGxhbmNlLCBpc0NvdmVyZWQsIGhvdXJTdGFydHMsIGhvdXJFbmRzLCBtb24sIHR1ZSwgd2VkLCB0aHUsIGZyaSwgc2F0LCBzdW5cblxuLy8gICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuLy8gICAgICAgICBuYW1lID0gYG5hbWUtJHtyYW5kb20oKX1gXG4vLyAgICAgICAgIHN1cm5hbWUgPSBgc3VybmFtZS0ke3JhbmRvbSgpfWBcbi8vICAgICAgICAgZW1haWwgPSBgZW1haWwtJHtyYW5kb20oKX1AbWFpbC5jb21gXG4vLyAgICAgICAgIHBob25lID0gMTIzNDU2ICsgYCR7cmFuZG9tKCl9YFxuLy8gICAgICAgICBwYXNzd29yZCA9IGBwYXNzd29yZC0ke3JhbmRvbSgpfWBcblxuLy8gICAgICAgICBuYW1lMiA9IGBuYW1lLSR7cmFuZG9tKCl9YFxuLy8gICAgICAgICBzdXJuYW1lMiA9IGBzdXJuYW1lLSR7cmFuZG9tKCl9YFxuLy8gICAgICAgICBlbWFpbDIgPSBgZW1haWwtJHtyYW5kb20oKX1AbWFpbC5jb21gXG4vLyAgICAgICAgIHBob25lMiA9IDEyMzQ1NiArIGAke3JhbmRvbSgpfWBcbi8vICAgICAgICAgcGFzc3dvcmQyID0gYHBhc3N3b3JkLSR7cmFuZG9tKCl9YFxuXG4vLyAgICAgICAgIHRpdGxlID0gYHRpdGxlLSR7cmFuZG9tKCl9YFxuLy8gICAgICAgICBhZGRyZXNzTG9jYXRpb24gPSBgYmFyY2Vsb25hYFxuLy8gICAgICAgICBhZGRyZXNzU3ROdW1iZXIgPSBgYWRkcmVzc1N0TnVtYmVyLSR7cmFuZG9tKCl9YFxuLy8gICAgICAgICBhZGRyZXNzT3RoZXIgPSBgYWRkcmVzc090aGVyLSR7cmFuZG9tKCl9YFxuLy8gICAgICAgICBsZW5ndGggPSA0LjVcbi8vICAgICAgICAgd2lkdGggPSAyLjIyXG4vLyAgICAgICAgIGhlaWdodCA9IDIuNFxuLy8gICAgICAgICBhcmVhID0gMTBcbi8vICAgICAgICAgZGVzY3JpcHRpb24gPSBgZGVzY3JpcHRpb24tJHtyYW5kb20oKX1gXG4vLyAgICAgICAgIHByaWNlID0gMlxuLy8gICAgICAgICBhY2NlcHRzQmFya2VyID0gJ3llcydcbi8vICAgICAgICAgc3VydmVpbGxhbmNlID0gJ25vJ1xuLy8gICAgICAgICBpc0NvdmVyZWQgPSAneWVzJ1xuLy8gICAgICAgICBob3VyU3RhcnRzID0gJzk6MDAnXG4vLyAgICAgICAgIGhvdXJFbmRzID0gJzE4OjAwJ1xuLy8gICAgICAgICBtb24gPSAneWVzJ1xuLy8gICAgICAgICB0dWUgPSAneWVzJ1xuLy8gICAgICAgICB3ZWQgPSAneWVzJ1xuLy8gICAgICAgICB0aHUgPSAneWVzJ1xuLy8gICAgICAgICBmcmkgPSAneWVzJ1xuLy8gICAgICAgICBzYXQgPSBmYWxzZVxuLy8gICAgICAgICBzdW4gPSBmYWxzZVxuXG4vLyAgICAgfSlcblxuLy8gICAgIGRlc2NyaWJlKCd3aGVuIGJvdGggdXNlciBhbmQgc3BvdCBleGlzdHMnLCAoKSA9PiB7XG4vLyAgICAgICAgIGJlZm9yZUVhY2goKCkgPT5cbi8vICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZShVc2VyLmNyZWF0ZSh7IG5hbWUsIHN1cm5hbWUsIGVtYWlsLCBwaG9uZSwgcGFzc3dvcmQgfSkpXG4vLyAgICAgICAgICAgICAgICAgLnRoZW4oKHsgaWQgfSkgPT4gX2lkID0gaWQpXG4vLyAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKFNwb3QuY3JlYXRlKHsgcHVibGlzaGVySWQ6IF9pZCwgdGl0bGU6IHRpdGxlLCBhZGRyZXNzTG9jYXRpb246IGFkZHJlc3NMb2NhdGlvbiwgYWRkcmVzc1N0TnVtYmVyOiBhZGRyZXNzU3ROdW1iZXIsIGFkZHJlc3NPdGhlcjogYWRkcmVzc090aGVyLCBsZW5ndGg6IGxlbmd0aCwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCwgYXJlYTogYXJlYSwgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLCBwcmljZTogcHJpY2UsIGFjY2VwdHNCYXJrZXI6IGFjY2VwdHNCYXJrZXIsIHN1cnZlaWxsYW5jZTogc3VydmVpbGxhbmNlLCBzQ292ZXJlZDogaXNDb3ZlcmVkLCBob3VyU3RhcnRzOiBob3VyU3RhcnRzLCBob3VyRW5kczogaG91ckVuZHMsIG1vbjogbW9uLCB0dWU6IHR1ZSwgd2VkOiB3ZWQsIHRodTogdGh1LCBmcmk6IGZyaSwgc2F0OiBzYXQsIHN1bjogc3VuIH0pKSlcbi8vICAgICAgICAgICAgICAgICAudGhlbigoeyBpZCB9KSA9PiBfc3BvdElkID0gaWQpXG4vLyAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gUHJvbWlzZS5hbGwoW1VzZXIuZmluZEJ5SWRBbmRVcGRhdGUoX2lkLCB7ICRwdXNoOiB7IHB1Ymxpc2hlZFNwb3RzOiBfc3BvdElkIH0gfSksIFNwb3QuZmluZEJ5SWRBbmRVcGRhdGUoX3Nwb3RJZCldKSlcbi8vICAgICAgICAgICAgICAgICAudGhlbigoW3VzZXIsIHNwb3RdKSA9PiB7XG4vLyAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbdXNlci5zYXZlKCksIHNwb3Quc2F2ZSgpXSlcbi8vICAgICAgICAgICAgICAgICB9KVxuLy8gICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHsgfSlcbi8vICAgICAgICAgKVxuXG4vLyAgICAgICAgIGl0KCdzaG91bGQgc3VjY2Vzc2Z1bGx5IHJldHJpZXZlIHRoZSBzcGVjaWZpYyBzcG90JywgKCkgPT5cbi8vICAgICAgICAgICAgIHJldHJpZXZlTXlCb29raW5ncyhfaWQpXG4vLyAgICAgICAgICAgICAgICAgLnRoZW4oc3BvdHMgPT4ge1xuXG4vLyAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzcG90cy5sZW5ndGgpLnRvLmVxdWFsKDEpXG4vLyAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzcG90cykudG8uYmUuaW5zdGFuY2VPZihBcnJheSlcbi8vICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHNwb3RzWzBdLmlkKS50by5lcXVhbChfc3BvdElkKVxuLy8gICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3BvdHNbMF0ucHVibGlzaGVySWQuaWQpLnRvLmVxdWFsKF9pZClcbi8vICAgICAgICAgICAgICAgICB9KVxuLy8gICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHsgfSlcbi8vICAgICAgICAgKVxuXG4vLyAgICAgICAgIGRlc2NyaWJlKCd3aGVuIHRoZSB1c2VyIGRvZXMgbm90IGV4aXN0JywgKCkgPT4ge1xuLy8gICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiBVc2VyLmRlbGV0ZU1hbnkoKS50aGVuKCgpID0+IHsgfSkpXG5cbi8vICAgICAgICAgICAgIGl0KCdzaG91bGQgZmFpbCB0byBwb3N0IGEgY29tbWVudCBpZiB0aGUgdXNlciBkb2VzIG5vdCBleGlzdCcsICgpID0+XG4vLyAgICAgICAgICAgICAgICAgcmV0cmlldmVNeUJvb2tpbmdzKF9pZClcbi8vICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoJ3Nob3VsZCBub3QgcmVhY2ggdGhpcyBwb2ludCcpIH0pXG4vLyAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoeyBtZXNzYWdlIH0pID0+IHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChtZXNzYWdlKS5ub3QudG8uYmUudW5kZWZpbmVkXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QobWVzc2FnZSkudG8uZXF1YWwoYHVzZXIgd2l0aCBpZCAke19pZH0gbm90IGZvdW5kYClcbi8vICAgICAgICAgICAgICAgICAgICAgfSlcbi8vICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4geyB9KVxuLy8gICAgICAgICAgICAgKVxuLy8gICAgICAgICB9KVxuXG4vLyAgICAgICAgIGRlc2NyaWJlKCd1bmhhcHB5IHBhdGhzJywgKCkgPT4ge1xuLy8gICAgICAgICAgICAgaXQoJ3Nob3VsZCBmYWlsIG9uIGEgbm9uLXN0cmluZyB1c2VyIGlkJywgKCkgPT4ge1xuLy8gICAgICAgICAgICAgICAgIF9faWQgPSA5MzI4NzQzMjg5XG4vLyAgICAgICAgICAgICAgICAgZXhwZWN0KCgpID0+IHJldHJpZXZlTXlCb29raW5ncyhfX2lkKSkudG8udGhyb3coVHlwZUVycm9yLCBgaWQgJHtfX2lkfSBpcyBub3QgYSBzdHJpbmdgKVxuXG4vLyAgICAgICAgICAgICAgICAgX19pZCA9IGZhbHNlXG4vLyAgICAgICAgICAgICAgICAgZXhwZWN0KCgpID0+IHJldHJpZXZlTXlCb29raW5ncyhfX2lkKSkudG8udGhyb3coVHlwZUVycm9yLCBgaWQgJHtfX2lkfSBpcyBub3QgYSBzdHJpbmdgKVxuXG4vLyAgICAgICAgICAgICAgICAgX19pZCA9IHVuZGVmaW5lZFxuLy8gICAgICAgICAgICAgICAgIGV4cGVjdCgoKSA9PiByZXRyaWV2ZU15Qm9va2luZ3MoX19pZCkpLnRvLnRocm93KFR5cGVFcnJvciwgYGlkICR7X19pZH0gaXMgbm90IGEgc3RyaW5nYClcblxuLy8gICAgICAgICAgICAgICAgIF9faWQgPSBbXVxuLy8gICAgICAgICAgICAgICAgIGV4cGVjdCgoKSA9PiByZXRyaWV2ZU15Qm9va2luZ3MoX19pZCkpLnRvLnRocm93KFR5cGVFcnJvciwgYGlkICR7X19pZH0gaXMgbm90IGEgc3RyaW5nYClcbi8vICAgICAgICAgICAgIH0pXG4vLyAgICAgICAgIH0pXG5cbi8vICAgICB9KVxuXG4vLyAgICAgYWZ0ZXIoKCkgPT4gUHJvbWlzZS5hbGwoW1VzZXIuZGVsZXRlTWFueSgpLCBTcG90LmRlbGV0ZU1hbnkoKV0pLnRoZW4oKCkgPT4gbW9uZ29vc2UuZGlzY29ubmVjdCgpKSlcbi8vIH0pIl19